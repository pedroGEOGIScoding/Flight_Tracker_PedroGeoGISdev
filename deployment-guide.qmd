---
title: "Deploying a React Vite App to GitHub Pages: A Complete Guide"
author: "Pedro GeoGIS"
date: "2025-07-30"
format: 
  html:
    toc: true
    toc-depth: 3
    code-fold: false
    theme: cosmo
---

# Introduction

This document provides a comprehensive guide for deploying a React application built with Vite to GitHub Pages using GitHub Actions. The process involved several challenges specific to Single Page Applications (SPAs) and GitHub Pages hosting, which we'll cover in detail.

## Project Overview

- **Application**: Flight Tracker Management Tool
- **Framework**: React with Vite
- **Routing**: React Router
- **Deployment Target**: GitHub Pages
- **Repository**: `Flight_Tracker_PedroGeoGISdev`
- **Branch**: `master`

# Deployment Process

## Step 1: Setting Up GitHub Actions Workflow

### Initial Setup

We chose **Method 1: GitHub Actions** for deployment as it provides automated builds and deployments with full control over the build process.

First, we created the GitHub Actions workflow file:

```bash
# Create the workflows directory
mkdir -p .github/workflows
```

### Workflow Configuration

Created `.github/workflows/deploy.yml`:

```yaml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ master ]  # Note: Using 'master' not 'main'

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
```

### Key Workflow Features

- **Automated Node.js setup** with npm caching for faster builds
- **Dependency installation** using `npm ci` for reproducible builds
- **Build process** runs `npm run build` to create production assets
- **Artifact upload** deploys the `./dist` folder (Vite's output directory)

## Step 2: Enabling GitHub Pages

In the repository settings:

1. Navigate to **Settings** → **Pages**
2. Under "Source", select **"GitHub Actions"**
3. Save the configuration

# Issues Encountered and Solutions

## Issue 1: Blank Page After Deployment

### Problem
After the initial deployment, the site loaded but displayed only a blank page with the title "Flight Management Tool".

### Diagnosis
Using browser developer tools, we found 404 errors for CSS and JavaScript assets:
```
Failed to load resource: the server responded with a status of 404 ()
```

### Root Cause
Vite was generating asset paths relative to the root domain (`/assets/`), but GitHub Pages serves the app from a subdirectory (`/Flight_Tracker_PedroGeoGISdev/`).

### Solution: Configure Vite Base Path

Modified `vite.config.js`:

```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  base: '/Flight_Tracker_PedroGeoGISdev/', // Added this line
})
```

### Commands Used
```bash
# Clear old build cache
rm -rf dist

# Rebuild with correct base path
npm run build

# Commit and deploy
git add vite.config.js
git commit -m "Fix Vite base path for GitHub Pages deployment"
git push origin master
```

### Verification
After the fix, the generated `dist/index.html` showed correct asset paths:
```html
<link rel="icon" type="image/png" href="/Flight_Tracker_PedroGeoGISdev/assets/plane-B2eNSDIj.png" />
<script type="module" crossorigin src="/Flight_Tracker_PedroGeoGISdev/assets/index-60JsLYey.js"></script>
<link rel="stylesheet" crossorigin href="/Flight_Tracker_PedroGeoGISdev/assets/index-6bPaNv2g.css">
```

## Issue 2: React Router 404 Errors

### Problem
The site loaded correctly, but clicking navigation tabs (Home, Real-Time Flight Map) resulted in 404 errors.

### Root Cause
GitHub Pages doesn't support server-side routing for SPAs. When users navigate to routes like `/home` or `/real-time-flight-map`, GitHub Pages tries to serve static files at those paths, which don't exist.

### Solution: Switch to HashRouter

Modified `src/main.jsx`:

```javascript
// Before
import { BrowserRouter } from 'react-router-dom'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>
)

// After
import { HashRouter } from 'react-router-dom'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <HashRouter>
      <App />
    </HashRouter>
  </StrictMode>
)
```

### Why HashRouter Works
- **BrowserRouter**: Uses clean URLs (`/home`) but requires server configuration
- **HashRouter**: Uses hash-based URLs (`#/home`) handled entirely by the browser

### Commands Used
```bash
# Rebuild with HashRouter
npm run build

# Deploy the fix
git add src/main.jsx
git commit -m "Fix React Router for GitHub Pages - switch to HashRouter"
git push origin master
```

## Issue 3: Navigation Links Not Working

### Problem
Even after implementing HashRouter, the "Real-Time Flight Map" tab was redirecting to an external URL (`https://pedrogeogiscoding.github.io/mapFlights`) instead of the app's internal routing.

### Root Cause
The navbar component was using HTML anchor tags (`<a href="...">`) instead of React Router's `Link` component, causing full page navigation instead of client-side routing.

### Diagnosis
Found in `src/components/Navbar.jsx`:
```javascript
// Problematic code
<Button
  color="inherit"
  key={item.title}
  component="a"           // ❌ HTML anchor tag
  href={item.path}        // ❌ Causes full page navigation
>
  {item.title}
</Button>
```

### Solution: Use React Router Links

Modified `src/components/Navbar.jsx`:

```javascript
// Added import
import { Link } from 'react-router-dom';

// Fixed desktop navigation
{navLinks.map((item) => (
  <Button
    color="inherit"
    key={item.title}
    component={Link}        // ✅ React Router Link
    to={item.path}          // ✅ Client-side navigation
  >
    {item.title}
  </Button>
))}

// Fixed mobile navigation
<ListItemButton 
  component={Link}          // ✅ React Router Link
  to={item.path}           // ✅ Client-side navigation
  onClick={() => toggleDrawer(false)}
>
```

### Commands Used
```bash
# Rebuild with fixed navigation
npm run build

# Deploy the final fix
git add src/components/Navbar.jsx
git commit -m "Fix navbar navigation - replace anchor tags with React Router Link"
git push origin master
```

# Final Configuration

## Complete File Structure

```
Flight_Tracker_PedroGeoGISdev/
├── .github/
│   └── workflows/
│       └── deploy.yml          # GitHub Actions workflow
├── src/
│   ├── components/
│   │   └── Navbar.jsx          # Fixed with React Router Links
│   ├── main.jsx                # Uses HashRouter
│   └── App.jsx                 # Route definitions
├── vite.config.js              # Configured with base path
└── dist/                       # Build output (auto-generated)
```

## Key Configuration Files

### `vite.config.js`
```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  base: '/Flight_Tracker_PedroGeoGISdev/',
})
```

### `src/main.jsx`
```javascript
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { HashRouter } from 'react-router-dom'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <HashRouter>
      <App />
    </HashRouter>
  </StrictMode>
)
```

# Deployment Commands Summary

## Essential Commands Used

```bash
# 1. Create workflow directory
mkdir -p .github/workflows

# 2. Build and test locally
npm run build

# 3. Clear build cache when needed
rm -rf dist

# 4. Git operations for deployment
git add .
git commit -m "Deployment fix description"
git push origin master

# 5. Monitor deployment
# Check GitHub repository → Actions tab
```

## Build Output Verification

After successful configuration, the build produces:
```
dist/index.html                       0.57 kB │ gzip:   0.33 kB
dist/assets/plane-B2eNSDIj.png       15.33 kB
dist/assets/HomeImage-gPZdBfKJ.jpg  212.68 kB
dist/assets/index-6bPaNv2g.css       17.06 kB │ gzip:   6.97 kB
dist/assets/index-KO6l-vZL.js       572.44 kB │ gzip: 180.48 kB
```

# Best Practices and Lessons Learned

## 1. GitHub Pages SPA Deployment Checklist

- [ ] Configure correct base path in build tool
- [ ] Use HashRouter for client-side routing
- [ ] Use React Router Links, not anchor tags
- [ ] Test all navigation paths
- [ ] Monitor GitHub Actions for deployment status

## 2. Common Pitfalls to Avoid

### ❌ Don't Use BrowserRouter
```javascript
// This won't work on GitHub Pages
import { BrowserRouter } from 'react-router-dom'
```

### ❌ Don't Use Anchor Tags for Internal Navigation
```javascript
// This causes full page navigation
<a href="/internal-route">Link</a>
```

### ❌ Don't Forget Base Path Configuration
```javascript
// Vite config without base path causes 404s
export default defineConfig({
  plugins: [react()],
  // Missing: base: '/repository-name/',
})
```

## 3. Debugging Tips

### Check Asset Paths
Inspect the generated `dist/index.html` to verify asset paths include the repository name:
```html
<!-- Correct -->
<script src="/Flight_Tracker_PedroGeoGISdev/assets/index-abc123.js"></script>

<!-- Incorrect -->
<script src="/assets/index-abc123.js"></script>
```

### Monitor Browser Console
Use browser developer tools to check for:
- 404 errors on asset loading
- JavaScript errors during navigation
- Network requests to external domains

### GitHub Actions Debugging
- Check the Actions tab for build failures
- Review build logs for error messages
- Verify the artifact upload includes the correct files

# Final Result

## Successful Deployment

The Flight Tracker application is now successfully deployed at:
**https://pedrogeogiscoding.github.io/Flight_Tracker_PedroGeoGISdev/**

## Working Features

✅ **Automated Deployment**: Every push to `master` triggers a new deployment  
✅ **Asset Loading**: All CSS, JavaScript, and images load correctly  
✅ **Client-Side Routing**: Navigation between pages works seamlessly  
✅ **Mobile Responsive**: Both desktop and mobile navigation function properly  
✅ **Hash-Based URLs**: URLs like `#/mapFlights` work correctly on GitHub Pages  

## URL Structure

- **Home Page**: `https://pedrogeogiscoding.github.io/Flight_Tracker_PedroGeoGISdev/#/`
- **Flight Map**: `https://pedrogeogiscoding.github.io/Flight_Tracker_PedroGeoGISdev/#/mapFlights`

# Conclusion

Deploying a React SPA to GitHub Pages requires specific configurations to handle:

1. **Asset path resolution** through build tool configuration
2. **Client-side routing** compatibility with static hosting
3. **Navigation implementation** using proper React Router components

The key insight is that GitHub Pages is designed for static sites, so SPAs need to work within those constraints. HashRouter and proper base path configuration are essential for a successful deployment.

This deployment process is now automated and will work for future updates to the application. Any push to the `master` branch will trigger a new build and deployment cycle.
